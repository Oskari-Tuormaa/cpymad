language: python

python:
  - "2.7"
  - "3.3"

# Build inside docker containers instead of virtual machines. These are
# faster, start quicker and support caching. Only downside: sudo is not
# supported. To work around this, the debian package must be extracted
# manually and a few environment variables need to be set up (see below).
sudo: false

env:
  global:
    # Enable caching of python wheels
    - PIP_FIND_LINKS=file://$HOME/.pip-cache
    - PIP_WHEEL_DIR=$HOME/.pip-cache

    # Current MAD-X debian package and install location
    - MADX_ARCHIVE=libmadx-dev_5.02.05-2_amd64.deb
    - PREFIX=$HOME/install

    # Activate fake MAD-X 'installation'
    - CPATH=$PREFIX/usr/include
    - LIBRARY_PATH=$PREFIX/usr/lib
    - LD_LIBRARY_PATH=$PREFIX/usr/lib

before_install:
  # Install MAD-X from PPA (see https://github.com/hibtc/madx-debian):
  # if this breaks, please revert 140d5ee59abd7763464019be0bdd116dc351d7fc:
  - wget https://launchpad.net/~coldfix/+archive/ubuntu/madx/+files/$MADX_ARCHIVE
  - dpkg -x $MADX_ARCHIVE $PREFIX

# Setup (performed within virtualenv)
install:
  # prepare dependency cache:
  - pip wheel -v cython pyyaml
  # NOTE: not creating a numpy wheel, since numpy is already installed on
  # Travis. Therefore, creating a wheel would require compiling numpy which
  # increases the build time. See:
  # http://docs.travis-ci.com/user/ci-environment/#Preinstalled-pip-packages

  # We need to install cython here, since Travis uses the checkout from the
  # repository which doesn't contain ".c" source files (unlike the source
  # distribution from PyPI):
  - pip install cython

  # Check that the source distribution can be used for installation -
  # without having *any* dependencies installed:
  - python setup.py sdist
  - pip uninstall cython -y
  - pip install $(ls ./dist/*.tar.gz | sort -rV | head -n1)
  # Need to remove cpymad folder otherwise it will be imported, but we want
  # to check the version installed from the source distribution:
  - rm -r cpymad

  - pip install nose coverage coveralls
# Actual tests:
script:
  - coverage run --source=cpymad    test/test_rpc.py      -v
  - coverage run --source=cpymad -a test/test_util.py     -v
  - coverage run --source=cpymad -a test/test_madx.py     -v

after_success:
  - base=`python -c 'import os,cpymad; print(os.path.dirname(cpymad.__file__))'`/..
  - mv .git .coverage $base
  - cd $base
  - coveralls

cache:
  apt: true
  directories:
    - $PIP_WHEEL_DIR
