language: python

# See: https://docs.travis-ci.com/user/languages/python/
python:
  - "2.7"
# - "3.3"   no manylinux support
  - "3.4"
  - "3.5"
  - "3.6"
# - "3.7"   in `jobs`, see below!

env:
  global:
    # GITHUB_TOKEN:
    - secure: "fdvPaSzbpf47Qb/2zDg/eHAS0bBFaAkWFxyxmhHQOkD0PlVxwi1Fh0Sq3dUZVwQgmmYj+hF6cFpqkFQJQe3zFqw9k14Ccr4dk69yjPNbQA1+yg0ARFntyqtM2DUN86brMcZG3ZM6V2HFuzKn9cQUvtjCQSKS26HybEnCG4vXz24="
    - TWINE_USERNAME=hibtc-deploy
    # TWINE_PASSWORD:
    - secure: "A2y/CUVGmBDemj+JCsupqexE7YiYcdIg6nOKPmBNjTCaum9CrvhebTmLDqtSfn1qFA3CbbFwyHIo/nlGioIMZfLhSYw/l3JlLTCMx57ESVqYRR7ou882mb1zizc5DrAfT1Sk8rHuBMI/iqpQOwsQPTOvBMW4ttnEsFWK/WrYKNM="

    - ART_REPO=https://$GITHUB_TOKEN@github.com/hibtc/cpymad-artifacts
    - ART_BRANCH=_$TRAVIS_BUILD_NUMBER-$TRAVIS_COMMIT

before_install:
  - lsb_release -a
  - env | sort
  - if [[ -z $TRAVIS_TAG ]]; then
      sed -i "/^__version__ = /s/'\$/.dev$TRAVIS_BUILD_NUMBER'/"
        src/cpymad/__init__.py ;
    fi

install:
  - pip install wheel
  - PY_ABI_TAG=$(python -c
        'from wheel.pep425tags import get_abi_tag; print(get_abi_tag())')

  # download wheels generated during build stage:
  - git clone $ART_REPO -b $ART_BRANCH --depth 1
  - pip install ./cpymad-artifacts/wheels/*-$PY_ABI_TAG-*_x86_64.whl
  - rm -rf cpymad-artifacts

  # docutils is required for `setup.py check -r`:
  - pip install flake8 docutils
  - pip install coverage coveralls

script:
  - python setup.py check -rsm
  - flake8

  - coverage run --source=cpymad -p test/test_util.py -v
  - coverage run --source=cpymad -p test/test_madx.py -v

after_success:
  - coverage combine
  - coveralls

cache:
  pip: true
  directories:
    - /home/travis/io


stages:
  - build
  - test
  - deploy

jobs:
  include:
    # Ubuntu 16.04 (Xenial Xerus) required for py3.7:
    - stage: test
      python: "3.7"
      dist: xenial

    - stage: build
      name: Build manylinux wheels
      python: "3.6"
      services:
        - docker
      install:
        - pip install docker-compose
      script:
        - git rev-parse HEAD:utils/manylinux > /tmp/cache_key
        - if ! cmp /home/travis/io/cache_key /tmp/cache_key; then
            echo "Clearing MAD-X build cache due to updated build scripts" ;
            sudo rm -rf /home/travis/io ;
          fi
        - mkdir -p /home/travis/io
        - chmod 777 /home/travis/io
        - sudo mv /tmp/cache_key /home/travis/io/
        - docker build -t wheelbuilder32 utils/manylinux -f utils/manylinux/Dockerfile_x86
        - docker build -t wheelbuilder64 utils/manylinux -f utils/manylinux/Dockerfile_x64
        # at the time of writing, mounting /io/cpymad as readonly volume
        # (the `:ro` option) causes container init error when executed on
        # travis (not on my local machine though), so we use `:rw` instead:
        - docker run --init --name artifacts32
            -v /home/travis/io/32:/io:rw
            -v `pwd`:/io/cpymad:rw
            -v /io/wheels
            --cap-drop=all
            wheelbuilder32
        - docker run --init --name artifacts64
            -v /home/travis/io/64:/io:rw
            -v `pwd`:/io/cpymad:rw
            -v /io/wheels
            --cap-drop=all
            wheelbuilder64
        - mkdir -p artifacts
        - docker cp artifacts32:/io/wheels ./artifacts/
        - docker cp artifacts64:/io/wheels ./artifacts/
      after_success:
        # Upload artifacts to github:
        - cd artifacts
        - git init
        - git add -f wheels/*.whl wheels/*.tar.gz
        - git commit -m "Build $TRAVIS_JOB_NUMBER" -m "$TRAVIS_BUILD_WEB_URL"
        # Upload to a unique branch for deterministic fetches during the later
        # stages, and to master for the user's convenience. The unique branch
        # can be removed after the run has finished.
        - git push -f $ART_REPO master:master master:$ART_BRANCH
      after_script:
        - cd $TRAVIS_BUILD_DIR
        - ./utils/cleanup_artifacts.py $ART_REPO $TRAVIS_BUILD_NUMBER 5

    - stage: deploy
      name: Upload release to PyPI
      python: "3.6"
      if: branch = test-release OR tag IS present
      install:
        - pip install twine
      script:
        - git clone $ART_REPO artifacts -b $ART_BRANCH --depth 1
        - if [[ -z $TRAVIS_TAG ]]; then
            export TWINE_REPOSITORY_URL=https://test.pypi.org/legacy/ ;
          fi
        - twine upload artifacts/wheels/*.tar.gz artifacts/wheels/*.whl
      after_success: skip

    - stage: deploy
      name: Update Documentation
      python: "3.6"
      script:
        - pip install sphinx sphinx_rtd_theme
        - make -C doc html
      after_success: true   # don't "skip"! it makes travis skip "deploy:" too!
      deploy:
        provider: pages
        local-dir: doc/_build/html
        skip-cleanup: true
        github-token: $GITHUB_TOKEN
        on:
          branch: master
