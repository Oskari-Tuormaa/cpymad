platform:
  - x86
  - x64

environment:
  # For Python versions available on Appveyor, see
  # https://www.appveyor.com/docs/windows-images-software/#python
  matrix:
    # Use conda to manage python environments:
    - CONDAPATH: 'C:\Miniconda36'

  global:
    MADXVER: 5.06.00
    MADXDIR: C:\madx
    COVERALLS_REPO_TOKEN:
      secure: PomPESKrst4rtCnkZOCyfyBEb03xcHzg6O0bGrYw7lf3oGWcA/ufdhu+7+shaJRF

    TWINE_USERNAME: hibtc-deploy
    TWINE_PASSWORD:
      secure: y7p5ueCXptYxkKjMeEbUHPX3+UnXM2o7KV6N5d5Pc0g=

install:
  # Log environment for informational purposes:
  - set

  # Switch to development version. This is necessary to prevent uploading the
  # same version twice to test.pypi.org on test-release, and provides some
  # safety against accidentally uploading a release version number to the
  # actual pypi:
  - ps: if ($env:APPVEYOR_REPO_TAG -ne $TRUE) {
          echo "`n[egg_info]`ntag-build = dev$env:APPVEYOR_BUILD_NUMBER" |
            out-file -encoding ascii -append setup.cfg ;
        }
  - python -c "import sys; sys.path.append('src'); import cpymad;
    print('building cpymad version:', cpymad.__version__);"

  # Configure and activate conda:
  - if "%PLATFORM%" == "x64" set "CONDAPATH=%CONDAPATH%-x64"
  - set "PATH=%CONDAPATH%\bin;%CONDAPATH%\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 yes
  - conda update -q conda
  - if "%PLATFORM%" == "x86" set "CONDA_FORCE_32BIT=1"

  # Remove git from path, since there is a `sh.exe` here that will cause CMake
  # to complain and stop:
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%

  # build MAD-X
  - conda create -qf -n madx python=3.8 cmake pywget -c anaconda
  - activate madx
  - conda install -q -c msys2 m2w64-toolchain
  - utils\build_madx.bat
  - conda deactivate

  # build cpymad
  - utils\build_wheels.bat

  # install cpymad
  - activate py38
  - conda install -q numpy -c anaconda
  - python -m pip install -U pip
  - pip install minrpc importlib_resources
  - pip install --no-index -f dist cpymad

  # Install build/test deps:
  - conda install -q coverage -c anaconda
  - pip install coveralls

build: off

test_script:
  - coverage run --source=cpymad -p test/test_util.py -v
  - coverage run --source=cpymad -p test/test_madx.py -v

after_test:
 - coverage combine
 - coveralls

artifacts:
  - path: 'dist\*.whl'
    name: wheel

deploy_script:
- ps: if ($env:APPVEYOR_REPO_TAG -eq $TRUE) {
        pip install twine 2>&1 ;
        twine upload dist/*.whl
      }
- ps: if ($env:APPVEYOR_REPO_BRANCH -eq "test-release") {
        $env:TWINE_REPOSITORY_URL = "https://test.pypi.org/legacy/" ;
        pip install twine 2>&1 ;
        twine upload dist/*.whl
      }
