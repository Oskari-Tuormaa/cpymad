:: This script builds cpymad windows wheels for all supported python versions
:: using @carlkl's mingwpy. It must be invoked in an enviroment with the
:: following dependencies:
::
:: - conda (for managing environments for different python versions)
::
:: - %PLATFORM% environment variable set to either "x86" or "x64"
::
:: - %MADXDIR% environment variable with the output directory from
::          python build_madx.py --static
::
:: IMPORTANT: mingwpy is the only compiler I found that links statically
:: against most of the runtime libraries (except for msvcrXX.dll) and thus
:: produces the most portable binaries. If porting to another compiler, please
:: check the resulting `libmadx.pyd` file with "Dependency Walker"
:: (http://www.dependencywalker.com/) for non-system runtime dependencies!

:: Create python environments:
call conda create -qyf -n py27 python=2.7 wheel cython
call conda create -qyf -n py33 python=3.3 wheel cython
call conda create -qyf -n py34 python=3.4 wheel cython
call conda create -qyf -n py35 python=3.5 wheel cython
call conda create -qyf -n py36 python=3.6 wheel cython
call conda create -qyf -n py37 python=3.7 wheel cython

:: Install mingwpy where available (note that mingwpy is not available on py35+
:: and that the simpler installation command `conda install -n py33 mingwpy`
:: fails due to a version conflict on py33):
call activate py27 && call pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy
call activate py33 && call pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy
call activate py34 && call pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy

:: Locate gcc from mingwpy in py34 (used later for build_cpymad2):
call activate py34
for /f %%G in ('python -c "import sys; print(sys.prefix)"') do (
    set "gcc=%%~fG\Scripts\gcc.exe"
)

:: Build cpymad wheels:
if "%PLATFORM%" == "x86" (
    call :build_cpymad  py27
    call :build_cpymad  py33
    call :build_cpymad  py34
    call :build_cpymad2 py35 35 win32-3.5 cp35-win32
    call :build_cpymad2 py36 36 win32-3.6 cp36-win32
    call :build_cpymad2 py37 37 win32-3.7 cp37-win32
) else (
    call :build_cpymad  py27
    call :build_cpymad  py33
    call :build_cpymad  py34
    call :build_cpymad2 py35 35 win-amd64-3.5 cp35-win_amd64
    call :build_cpymad2 py36 36 win-amd64-3.6 cp36-win_amd64
    call :build_cpymad2 py37 37 win-amd64-3.7 cp37-win_amd64
)
exit /b %ERRORLEVEL%


:: Build cpymad on py27-py34 where mingwpy is available natively. The easiest
:: and most reliable way to build cpymad here is using setuptools:
:build_cpymad
    set "py_env=%1"

    :: Ensure that cython code and extension module will be rebuilt since the
    :: cython code is partially incompatible between python versions:
    del /f src\cpymad\libmadx.c ^
           src\cpymad\libmadx.pyd

    call activate %py_env% & @echo on
    call python setup.py build_ext -c mingw32 --static
    call python setup.py bdist_wheel
exit /b 0


:: Build cpymad on py35+ for which mingwpy is not available. We will manually
:: execute the compiler command lines that would be generated by setuptools as
:: well (compare output from the `build_ext` step in :build_cpymad!). The
:: downside is that we link a different C runtime than is natively used by
:: python. This should work as long as we don't management of C objects/memory
:: between python and cpymad, and requires distributing msvcr100.dll to the
:: target machine.
:build_cpymad2
    set "py_env=%1"
    set "py_ver=%2"
    set "dir_tag=%3"
    set "file_tag=%4"

    :: Ensure that cython code and extension module will be rebuilt since the
    :: cython code is partially incompatible between python versions:
    del /f src\cpymad\libmadx.c ^
           src\cpymad\libmadx.pyd

    :: We use a two stage build with the exact filenames as `python setup.py
    :: build_ext` would do (compile `.c` to `.obj` in %tempdir%, then link to
    :: `.pyd` in %libdir%) to prevent the final `python setup.py bdist_wheel`
    :: command from trying trying to perform either of these steps with MSVC.

    call activate %py_env% & @echo on
    set tempdir=build\temp.%dir_tag%\Release\src\cpymad
    set libdir=build\lib.%dir_tag%\cpymad
    mkdir %tempdir%
    mkdir %libdir%

    for /f %%G in ('python -c "import sys; print(sys.prefix)"') do (
        set "pythondir=%%~fG"
    )

    call cythonize src\cpymad\libmadx.pyx

    call %gcc% -mdll -O -Wall ^
        -I%MADXDIR%\include ^
        -I%pythondir%\include ^
        -c src/cpymad/libmadx.c ^
        -o %tempdir%\libmadx.obj ^
        -std=gnu99

    :: Linking directly against the `pythonXX.dll` is the only way I found to
    :: satisfy the linker in a conda python environment. The conventional
    :: command line `-L%pythondir%\libs -lpython%py_ver%` used to work fine on
    :: WinPython, but fails on conda with large number of complaints about
    :: about undefined references, such as `__imp__Py_NoneStruct`,
    call %gcc% -shared -s ^
        %tempdir%\libmadx.obj ^
        -L%MADXDIR%\lib ^
        -lmadx -lptc -lgc-lib -lstdc++ -lgfortran ^
        -lquadmath %pythondir%\python%py_ver%.dll -lmsvcr100 ^
        -o %libdir%\libmadx.%file_tag%.pyd

    call python setup.py bdist_wheel
exit /b 0
